import { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["input"];
const _c1 = ["thumb"];
const _c2 = ["thumbValue"];
const _c3 = function (a0) { return { "thumb-active": a0 }; };
const RANGE_VALUE_ACCESOR = {
    provide: NG_VALUE_ACCESSOR,
    // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define
    useExisting: forwardRef(() => MdbRangeComponent),
    multi: true,
};
class MdbRangeComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.min = 0;
        this.max = 100;
        this.rangeValueChange = new EventEmitter();
        this.visibility = false;
        // Control Value Accessor Methods
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    get default() {
        return this._default;
    }
    set default(value) {
        this._default = value;
    }
    onchange(event) {
        this.onChange(event.target.value);
    }
    onInput() {
        this.rangeValueChange.emit({ value: this.value });
        this.focusRangeInput();
    }
    ngAfterViewInit() {
        this.thumbPositionUpdate();
    }
    focusRangeInput() {
        this.input.nativeElement.focus();
        this.visibility = true;
    }
    blurRangeInput() {
        this.input.nativeElement.blur();
        this.visibility = false;
    }
    thumbPositionUpdate() {
        const rangeInput = this.input.nativeElement;
        const inputValue = rangeInput.value;
        const minValue = rangeInput.min ? rangeInput.min : 0;
        const maxValue = rangeInput.max ? rangeInput.max : 100;
        const newValue = Number(((inputValue - minValue) * 100) / (maxValue - minValue));
        this.value = inputValue;
        this.thumbStyle = { left: `calc(${newValue}% + (${8 - newValue * 0.15}px))` };
    }
    writeValue(value) {
        this.value = value;
        this._cdRef.markForCheck();
        setTimeout(() => {
            this.thumbPositionUpdate();
        }, 0);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
MdbRangeComponent.ɵfac = function MdbRangeComponent_Factory(t) { return new (t || MdbRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MdbRangeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbRangeComponent, selectors: [["mdb-range"]], viewQuery: function MdbRangeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
        ɵngcc0.ɵɵviewQuery(_c1, 5);
        ɵngcc0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thumb = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thumbValue = _t.first);
    } }, hostBindings: function MdbRangeComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("change", function MdbRangeComponent_change_HostBindingHandler($event) { return ctx.onchange($event); })("input", function MdbRangeComponent_input_HostBindingHandler() { return ctx.onInput(); });
    } }, inputs: { min: "min", max: "max", disabled: "disabled", default: "default", value: "value", id: "id", required: "required", name: "name", label: "label", step: "step", defaultRangeCounterClass: "defaultRangeCounterClass" }, outputs: { rangeValueChange: "rangeValueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([RANGE_VALUE_ACCESOR])], decls: 10, vars: 15, consts: [["for", "id", 1, "form-label"], [1, "range"], ["type", "range", "min", "0", "max", "5", 1, "form-range", 3, "name", "disabled", "id", "min", "max", "step", "value", "ngModel", "ngModelChange", "input", "blur", "mousedown", "mouseup", "touchstart", "touchend"], ["input", ""], [1, "thumb", 3, "ngStyle", "ngClass"], ["thumb", ""], [1, "thumb-value"], ["thumbValue", ""]], template: function MdbRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "input", 2, 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function MdbRangeComponent_Template_input_ngModelChange_3_listener($event) { return ctx.value = $event; })("input", function MdbRangeComponent_Template_input_input_3_listener() { return ctx.thumbPositionUpdate(); })("blur", function MdbRangeComponent_Template_input_blur_3_listener() { return ctx.blurRangeInput(); })("mousedown", function MdbRangeComponent_Template_input_mousedown_3_listener() { return ctx.focusRangeInput(); })("mouseup", function MdbRangeComponent_Template_input_mouseup_3_listener() { return ctx.blurRangeInput(); })("touchstart", function MdbRangeComponent_Template_input_touchstart_3_listener() { return ctx.focusRangeInput(); })("touchend", function MdbRangeComponent_Template_input_touchend_3_listener() { return ctx.blurRangeInput(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "span", 4, 5);
        ɵngcc0.ɵɵelementStart(7, "span", 6, 7);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.label);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("name", ctx.name)("disabled", ctx.disabled)("id", ctx.id)("min", ctx.min)("max", ctx.max)("step", ctx.step)("value", ctx.value)("ngModel", ctx.value)("id", ctx.id);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngStyle", ctx.thumbStyle)("ngClass", ɵngcc0.ɵɵpureFunction1(13, _c3, ctx.visibility));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.value);
    } }, directives: [ɵngcc1.RangeValueAccessor, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.NgStyle, ɵngcc2.NgClass], encapsulation: 2, changeDetection: 0 });
MdbRangeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MdbRangeComponent.propDecorators = {
    input: [{ type: ViewChild, args: ['input',] }],
    thumb: [{ type: ViewChild, args: ['thumb',] }],
    thumbValue: [{ type: ViewChild, args: ['thumbValue',] }],
    id: [{ type: Input }],
    required: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    label: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    default: [{ type: Input }],
    defaultRangeCounterClass: [{ type: Input }],
    rangeValueChange: [{ type: Output }],
    onchange: [{ type: HostListener, args: ['change', ['$event'],] }],
    onInput: [{ type: HostListener, args: ['input',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbRangeComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-range',
                template: "<label for=\"id\" class=\"form-label\">{{ label }}</label>\n<div class=\"range\">\n  <input\n    #input\n    [name]=\"name\"\n    type=\"range\"\n    [disabled]=\"disabled\"\n    [id]=\"id\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"step\"\n    [value]=\"value\"\n    [(ngModel)]=\"value\"\n    class=\"form-range\"\n    min=\"0\"\n    max=\"5\"\n    [id]=\"id\"\n    (input)=\"thumbPositionUpdate()\"\n    (blur)=\"blurRangeInput()\"\n    (mousedown)=\"focusRangeInput()\"\n    (mouseup)=\"blurRangeInput()\"\n    (touchstart)=\"focusRangeInput()\"\n    (touchend)=\"blurRangeInput()\"\n  />\n  <span #thumb class=\"thumb\" [ngStyle]=\"thumbStyle\" [ngClass]=\"{ 'thumb-active': this.visibility }\">\n    <span #thumbValue class=\"thumb-value\">{{ value }}</span>\n  </span>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [RANGE_VALUE_ACCESOR]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { min: [{
            type: Input
        }], max: [{
            type: Input
        }], rangeValueChange: [{
            type: Output
        }], disabled: [{
            type: Input
        }], default: [{
            type: Input
        }], onchange: [{
            type: HostListener,
            args: ['change', ['$event']]
        }], onInput: [{
            type: HostListener,
            args: ['input']
        }], value: [{
            type: Input
        }], input: [{
            type: ViewChild,
            args: ['input']
        }], thumb: [{
            type: ViewChild,
            args: ['thumb']
        }], thumbValue: [{
            type: ViewChild,
            args: ['thumbValue']
        }], id: [{
            type: Input
        }], required: [{
            type: Input
        }], name: [{
            type: Input
        }], label: [{
            type: Input
        }], step: [{
            type: Input
        }], defaultRangeCounterClass: [{
            type: Input
        }] }); })();

class MdbRangeModule {
}
MdbRangeModule.ɵfac = function MdbRangeModule_Factory(t) { return new (t || MdbRangeModule)(); };
MdbRangeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MdbRangeModule });
MdbRangeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, FormsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbRangeModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [MdbRangeComponent],
                exports: [MdbRangeComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbRangeModule, { declarations: function () { return [MdbRangeComponent]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [MdbRangeComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { MdbRangeComponent, MdbRangeModule, RANGE_VALUE_ACCESOR as ɵa };

//# sourceMappingURL=mdb-angular-ui-kit-range.js.map
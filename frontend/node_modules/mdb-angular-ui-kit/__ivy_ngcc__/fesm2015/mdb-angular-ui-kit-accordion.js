import { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, ViewChild, Input, Output, HostBinding, ContentChildren, NgModule } from '@angular/core';
import { startWith, switchMap } from 'rxjs/operators';
import { Subject, merge } from 'rxjs';
import { MdbCollapseDirective, MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'mdb-angular-ui-kit/collapse';

function MdbAccordionItemComponent_3_ng_template_0_Template(rf, ctx) { }
function MdbAccordionItemComponent_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MdbAccordionItemComponent_3_ng_template_0_Template, 0, 0, "ng-template", 5);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0._headerTemplate);
} }
function MdbAccordionItemComponent_6_ng_template_0_Template(rf, ctx) { }
function MdbAccordionItemComponent_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MdbAccordionItemComponent_6_ng_template_0_Template, 0, 0, "ng-template", 5);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1._bodyTemplate);
} }
const _c0 = ["*"];
const MDB_ACCORDION_ITEM_BODY = new InjectionToken('MdbAccordionItemBodyDirective');
class MdbAccordionItemBodyDirective {
    constructor(template) {
        this.template = template;
    }
}
MdbAccordionItemBodyDirective.ɵfac = function MdbAccordionItemBodyDirective_Factory(t) { return new (t || MdbAccordionItemBodyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MdbAccordionItemBodyDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MdbAccordionItemBodyDirective, selectors: [["", "mdbAccordionItemBody", ""]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MDB_ACCORDION_ITEM_BODY, useExisting: MdbAccordionItemBodyDirective }])] });
MdbAccordionItemBodyDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbAccordionItemBodyDirective, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbAccordionItemBody]',
                providers: [{ provide: MDB_ACCORDION_ITEM_BODY, useExisting: MdbAccordionItemBodyDirective }]
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

const MDB_ACCORDION_ITEM_HEADER = new InjectionToken('MdbAccordionItemHeaderDirective');
class MdbAccordionItemHeaderDirective {
    constructor(template) {
        this.template = template;
    }
}
MdbAccordionItemHeaderDirective.ɵfac = function MdbAccordionItemHeaderDirective_Factory(t) { return new (t || MdbAccordionItemHeaderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MdbAccordionItemHeaderDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MdbAccordionItemHeaderDirective, selectors: [["", "mdbAccordionItemHeader", ""]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MDB_ACCORDION_ITEM_HEADER, useExisting: MdbAccordionItemHeaderDirective }])] });
MdbAccordionItemHeaderDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbAccordionItemHeaderDirective, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbAccordionItemHeader]',
                providers: [{ provide: MDB_ACCORDION_ITEM_HEADER, useExisting: MdbAccordionItemHeaderDirective }]
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

let uniqueHeaderId = 0;
let uniqueId = 0;
class MdbAccordionItemComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.id = `mdb-accordion-item-${uniqueId++}`;
        this._headerId = `mdb-accordion-item-header-${uniqueHeaderId++}`;
        this._isInitialized = false;
        this._shouldOpenOnInit = false;
        this.itemShow = new EventEmitter();
        this.itemShown = new EventEmitter();
        this.itemHide = new EventEmitter();
        this.itemHidden = new EventEmitter();
        this.accordionItem = true;
        this.show$ = new Subject();
        this._collapsed = true;
        this._addCollapsedClass = true;
    }
    set collapsed(value) {
        if (!this._isInitialized) {
            if (!value) {
                this._shouldOpenOnInit = true;
            }
            return;
        }
        if (value) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    ngOnInit() {
        this._isInitialized = true;
        if (this._shouldOpenOnInit) {
            this.show();
        }
    }
    toggle() {
        this.collapse.toggle();
    }
    show() {
        this.collapse.show();
        this._cdRef.markForCheck();
    }
    hide() {
        this.collapse.hide();
        this._cdRef.markForCheck();
    }
    onShow() {
        this._addCollapsedClass = false;
        this.itemShow.emit(this);
        this.show$.next(this);
    }
    onHide() {
        this._addCollapsedClass = true;
        this.itemHide.emit(this);
    }
    onShown() {
        this._collapsed = false;
        this.itemShown.emit(this);
    }
    onHidden() {
        this._collapsed = true;
        this.itemHidden.emit(this);
    }
}
MdbAccordionItemComponent.ɵfac = function MdbAccordionItemComponent_Factory(t) { return new (t || MdbAccordionItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MdbAccordionItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbAccordionItemComponent, selectors: [["mdb-accordion-item"]], contentQueries: function MdbAccordionItemComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MDB_ACCORDION_ITEM_HEADER, 7, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MDB_ACCORDION_ITEM_BODY, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._bodyTemplate = _t.first);
    } }, viewQuery: function MdbAccordionItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MdbCollapseDirective, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.collapse = _t.first);
    } }, hostVars: 2, hostBindings: function MdbAccordionItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("accordion-item", ctx.accordionItem);
    } }, inputs: { id: "id", collapsed: "collapsed", header: "header" }, outputs: { itemShow: "itemShow", itemShown: "itemShown", itemHide: "itemHide", itemHidden: "itemHidden" }, decls: 7, vars: 10, consts: [[1, "accordion-header", 3, "id"], ["type", "button", 1, "accordion-button", 3, "click"], [4, "ngIf"], ["mdbCollapse", "", 3, "collapseShow", "collapseHide"], [1, "accordion-body"], [3, "ngTemplateOutlet"]], template: function MdbAccordionItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function MdbAccordionItemComponent_Template_button_click_1_listener() { return ctx.toggle(); });
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵtemplate(3, MdbAccordionItemComponent_3_Template, 1, 1, undefined, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵlistener("collapseShow", function MdbAccordionItemComponent_Template_div_collapseShow_4_listener() { return ctx.onShow(); })("collapseHide", function MdbAccordionItemComponent_Template_div_collapseHide_4_listener() { return ctx.onHide(); })("collapseShow", function MdbAccordionItemComponent_Template_div_collapseShow_4_listener() { return ctx.onShown(); })("collapseHide", function MdbAccordionItemComponent_Template_div_collapseHide_4_listener() { return ctx.onHidden(); });
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵtemplate(6, MdbAccordionItemComponent_6_Template, 1, 1, undefined, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx._headerId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("collapsed", ctx._addCollapsedClass);
        ɵngcc0.ɵɵattribute("aria-expanded", !ctx._collapsed)("aria-controls", ctx.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.header, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx._headerTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("id", ctx.id)("aria-labelledby", ctx._headerId);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx._bodyTemplate);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MdbCollapseDirective, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
MdbAccordionItemComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MdbAccordionItemComponent.propDecorators = {
    _headerTemplate: [{ type: ContentChild, args: [MDB_ACCORDION_ITEM_HEADER, { read: TemplateRef, static: true },] }],
    _bodyTemplate: [{ type: ContentChild, args: [MDB_ACCORDION_ITEM_BODY, { read: TemplateRef, static: true },] }],
    collapse: [{ type: ViewChild, args: [MdbCollapseDirective, { static: true },] }],
    header: [{ type: Input }],
    collapsed: [{ type: Input }],
    id: [{ type: Input }],
    itemShow: [{ type: Output }],
    itemShown: [{ type: Output }],
    itemHide: [{ type: Output }],
    itemHidden: [{ type: Output }],
    accordionItem: [{ type: HostBinding, args: ['class.accordion-item',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbAccordionItemComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-accordion-item',
                template: "<h2 class=\"accordion-header\" [id]=\"_headerId\">\n  <button\n    class=\"accordion-button\"\n    type=\"button\"\n    [attr.aria-expanded]=\"!_collapsed\"\n    [attr.aria-controls]=\"id\"\n    [class.collapsed]=\"_addCollapsedClass\"\n    (click)=\"toggle()\"\n  >\n    {{ header }}\n    <ng-template *ngIf=\"_headerTemplate\" [ngTemplateOutlet]=\"_headerTemplate\"></ng-template>\n  </button>\n</h2>\n<div\n  mdbCollapse\n  (collapseShow)=\"onShow()\"\n  (collapseHide)=\"onHide()\"\n  (collapseShow)=\"onShown()\"\n  (collapseHide)=\"onHidden()\"\n  [attr.id]=\"id\"\n  [attr.aria-labelledby]=\"_headerId\"\n>\n  <div class=\"accordion-body\">\n    <ng-template *ngIf=\"_bodyTemplate\" [ngTemplateOutlet]=\"_bodyTemplate\"></ng-template>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { id: [{
            type: Input
        }], itemShow: [{
            type: Output
        }], itemShown: [{
            type: Output
        }], itemHide: [{
            type: Output
        }], itemHidden: [{
            type: Output
        }], accordionItem: [{
            type: HostBinding,
            args: ['class.accordion-item']
        }], collapsed: [{
            type: Input
        }], _headerTemplate: [{
            type: ContentChild,
            args: [MDB_ACCORDION_ITEM_HEADER, { read: TemplateRef, static: true }]
        }], _bodyTemplate: [{
            type: ContentChild,
            args: [MDB_ACCORDION_ITEM_BODY, { read: TemplateRef, static: true }]
        }], collapse: [{
            type: ViewChild,
            args: [MdbCollapseDirective, { static: true }]
        }], header: [{
            type: Input
        }] }); })();

class MdbAccordionComponent {
    constructor() {
        this._flush = false;
        this._multiple = false;
        this.accordion = true;
    }
    get flush() {
        return this._flush;
    }
    set flush(value) {
        this._flush = coerceBooleanProperty(value);
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    get addFlushClass() {
        return this.flush;
    }
    ngAfterContentInit() {
        this.items.changes
            .pipe(startWith(this.items), switchMap((items) => {
            return merge(...items.map((item) => item.show$));
        }))
            .subscribe((clickedItem) => this._handleMultipleItems(clickedItem));
    }
    _handleMultipleItems(clickedItem) {
        if (!this.multiple) {
            const itemsToClose = this.items.filter((item) => item !== clickedItem && !item._collapsed);
            itemsToClose.forEach((item) => item.hide());
        }
    }
}
MdbAccordionComponent.ɵfac = function MdbAccordionComponent_Factory(t) { return new (t || MdbAccordionComponent)(); };
MdbAccordionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbAccordionComponent, selectors: [["mdb-accordion"]], contentQueries: function MdbAccordionComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MdbAccordionItemComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);
    } }, hostVars: 4, hostBindings: function MdbAccordionComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("accordion", ctx.accordion)("accordion-flush", ctx.addFlushClass);
    } }, inputs: { flush: "flush", multiple: "multiple" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function MdbAccordionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
MdbAccordionComponent.ctorParameters = () => [];
MdbAccordionComponent.propDecorators = {
    items: [{ type: ContentChildren, args: [MdbAccordionItemComponent,] }],
    flush: [{ type: Input }],
    multiple: [{ type: Input }],
    accordion: [{ type: HostBinding, args: ['class.accordion',] }],
    addFlushClass: [{ type: HostBinding, args: ['class.accordion-flush',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbAccordionComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-accordion',
                template: "<ng-content></ng-content>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { accordion: [{
            type: HostBinding,
            args: ['class.accordion']
        }], flush: [{
            type: Input
        }], multiple: [{
            type: Input
        }], addFlushClass: [{
            type: HostBinding,
            args: ['class.accordion-flush']
        }], items: [{
            type: ContentChildren,
            args: [MdbAccordionItemComponent]
        }] }); })();

class MdbAccordionModule {
}
MdbAccordionModule.ɵfac = function MdbAccordionModule_Factory(t) { return new (t || MdbAccordionModule)(); };
MdbAccordionModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MdbAccordionModule });
MdbAccordionModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, MdbCollapseModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbAccordionModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MdbAccordionComponent,
                    MdbAccordionItemComponent,
                    MdbAccordionItemHeaderDirective,
                    MdbAccordionItemBodyDirective,
                ],
                imports: [CommonModule, MdbCollapseModule],
                exports: [
                    MdbAccordionComponent,
                    MdbAccordionItemComponent,
                    MdbAccordionItemHeaderDirective,
                    MdbAccordionItemBodyDirective,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbAccordionModule, { declarations: function () { return [MdbAccordionComponent, MdbAccordionItemComponent, MdbAccordionItemHeaderDirective, MdbAccordionItemBodyDirective]; }, imports: function () { return [CommonModule, MdbCollapseModule]; }, exports: function () { return [MdbAccordionComponent, MdbAccordionItemComponent, MdbAccordionItemHeaderDirective, MdbAccordionItemBodyDirective]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { MdbAccordionComponent, MdbAccordionItemBodyDirective, MdbAccordionItemComponent, MdbAccordionItemHeaderDirective, MdbAccordionModule, MDB_ACCORDION_ITEM_HEADER as ɵa, MDB_ACCORDION_ITEM_BODY as ɵb };

//# sourceMappingURL=mdb-angular-ui-kit-accordion.js.map
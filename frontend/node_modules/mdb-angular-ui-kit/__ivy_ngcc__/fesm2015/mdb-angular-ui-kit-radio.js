import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Directive, Input, HostBinding, forwardRef, ContentChildren, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { Subject, from } from 'rxjs';
import { startWith, switchMap, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
class MdbRadioDirective {
    constructor() {
        this._checked = false;
        this._value = null;
        this._disabled = false;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get checked() {
        return this._checked;
    }
    set checked(value) {
        this._checked = coerceBooleanProperty(value);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    get isDisabled() {
        return this._disabled;
    }
    get isChecked() {
        return this._checked;
    }
    get nameAttr() {
        return this.name;
    }
    _updateName(value) {
        this._name = value;
    }
    _updateChecked(value) {
        this._checked = value;
    }
    _updateDisabledState(value) {
        this._disabled = value;
    }
}
MdbRadioDirective.ɵfac = function MdbRadioDirective_Factory(t) { return new (t || MdbRadioDirective)(); };
MdbRadioDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MdbRadioDirective, selectors: [["", "mdbRadio", ""]], hostVars: 3, hostBindings: function MdbRadioDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("disabled", ctx.isDisabled)("checked", ctx.isChecked);
        ɵngcc0.ɵɵattribute("name", ctx.nameAttr);
    } }, inputs: { name: "name", checked: "checked", value: "value", disabled: "disabled" } });
MdbRadioDirective.ctorParameters = () => [];
MdbRadioDirective.propDecorators = {
    name: [{ type: Input }],
    checked: [{ type: Input, args: ['checked',] }],
    value: [{ type: Input, args: ['value',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    isDisabled: [{ type: HostBinding, args: ['disabled',] }],
    isChecked: [{ type: HostBinding, args: ['checked',] }],
    nameAttr: [{ type: HostBinding, args: ['attr.name',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbRadioDirective, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbRadio]'
            }]
    }], function () { return []; }, { name: [{
            type: Input
        }], checked: [{
            type: Input,
            args: ['checked']
        }], value: [{
            type: Input,
            args: ['value']
        }], disabled: [{
            type: Input,
            args: ['disabled']
        }], isDisabled: [{
            type: HostBinding,
            args: ['disabled']
        }], isChecked: [{
            type: HostBinding,
            args: ['checked']
        }], nameAttr: [{
            type: HostBinding,
            args: ['attr.name']
        }] }); })();

const MDB_RADIO_GROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define
    useExisting: forwardRef(() => MdbRadioGroupDirective),
    multi: true,
};
class MdbRadioGroupDirective {
    constructor() {
        this._disabled = false;
        this._destroy$ = new Subject();
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        if (this.radios) {
            this._updateChecked();
        }
    }
    get name() {
        return this._name;
    }
    set name(name) {
        this._name = name;
        if (this.radios) {
            this._updateNames();
        }
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = disabled;
        if (this.radios) {
            this._updateDisabled();
        }
    }
    ngAfterContentInit() {
        this._updateNames();
        this._updateDisabled();
        this.radios.changes
            .pipe(startWith(this.radios), switchMap((radios) => from(Promise.resolve(radios))), takeUntil(this._destroy$))
            .subscribe(() => this._updateRadiosState());
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    _updateRadiosState() {
        this._updateNames();
        this._updateChecked();
        this._updateDisabled();
    }
    _updateNames() {
        this.radios.forEach((radio) => radio._updateName(this.name));
    }
    _updateChecked() {
        this.radios.forEach((radio) => {
            const isChecked = radio.value === this._value;
            radio._updateChecked(isChecked);
        });
    }
    _updateDisabled() {
        this.radios.forEach((radio) => radio._updateDisabledState(this._disabled));
    }
    // Control value accessor methods
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
        this._updateDisabled();
    }
    writeValue(value) {
        this.value = value;
    }
}
MdbRadioGroupDirective.ɵfac = function MdbRadioGroupDirective_Factory(t) { return new (t || MdbRadioGroupDirective)(); };
MdbRadioGroupDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MdbRadioGroupDirective, selectors: [["", "mdbRadioGroup", ""]], contentQueries: function MdbRadioGroupDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MdbRadioDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radios = _t);
    } }, inputs: { value: "value", name: "name", disabled: "disabled" }, features: [ɵngcc0.ɵɵProvidersFeature([MDB_RADIO_GROUP_VALUE_ACCESSOR])] });
MdbRadioGroupDirective.propDecorators = {
    radios: [{ type: ContentChildren, args: [MdbRadioDirective, { descendants: true },] }],
    value: [{ type: Input }],
    name: [{ type: Input }],
    disabled: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbRadioGroupDirective, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbRadioGroup]',
                providers: [MDB_RADIO_GROUP_VALUE_ACCESSOR]
            }]
    }], function () { return []; }, { value: [{
            type: Input
        }], name: [{
            type: Input
        }], disabled: [{
            type: Input
        }], radios: [{
            type: ContentChildren,
            args: [MdbRadioDirective, { descendants: true }]
        }] }); })();

class MdbRadioModule {
}
MdbRadioModule.ɵfac = function MdbRadioModule_Factory(t) { return new (t || MdbRadioModule)(); };
MdbRadioModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MdbRadioModule });
MdbRadioModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, FormsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbRadioModule, [{
        type: NgModule,
        args: [{
                declarations: [MdbRadioDirective, MdbRadioGroupDirective],
                exports: [MdbRadioDirective, MdbRadioGroupDirective],
                imports: [CommonModule, FormsModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbRadioModule, { declarations: function () { return [MdbRadioDirective, MdbRadioGroupDirective]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [MdbRadioDirective, MdbRadioGroupDirective]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { MDB_RADIO_GROUP_VALUE_ACCESSOR, MdbRadioDirective, MdbRadioGroupDirective, MdbRadioModule };

//# sourceMappingURL=mdb-angular-ui-kit-radio.js.map